//daySetting      = FieldSettings ("预定日期") Nothing (Just "daySid") Nothing []
//roomSetting     = FieldSettings ("会议室") Nothing (Just "roomSid") Nothing []
//startDaySetting = FieldSettings ("开始时间") Nothing (Just "startDaySid") Nothing []
//endDaySetting   = FieldSettings ("结束时间") Nothing (Just "endDaySid") Nothing []

$(document).ready(function() {
    /// 1. do all init.    
    var dayId   = document.getElementById("daySid");
    var roomId  = document.getElementById("roomSid");
    var startId = document.getElementById("startDaySid");
    var endId   = document.getElementById("endDaySid");
    var usageId = document.getElementById("roomUsageSid");
    var otherUsageId = document.getElementById("otherUsageSid");

    //console.log(dayId);
    //console.log(roomId);
    //console.log(startId);
    //console.log(endId);
    //console.log("#{rawJS curDateStr}");

    var bookingDay = $(dayId).val();
    var roomNo     = $(roomId).val();
    var startTime  = $(startId).text();
    var endTime    = $(endId).text();
    var usageText  = $(usageId).val();
    var usageLen   = $(usageId).children('option').length;

    $(dayId).datepicker('option', 'numberOfMonths', [1, 3]); 
    $(dayId).datepicker("option", "minDate", "#{rawJS curDateStr}");
    $(dayId).datepicker("option", "maxDate", "#{rawJS endDateStr}");
    $(dayId).datepicker("option", "onSelect", onDateSelect);
    
    $(otherUsageId).hide(); // initial status of otherRoomUsage
    setupDataTable(bookingDay, roomNo);

    /// 2. all callbacks needed.
    function onDateSelect(dateText, inst) {
        bookingDay = dateText;
        destroyDataTable();
        setupDataTable(bookingDay, roomNo); 
    };

    $(startId).change(function () {
        //console.log($(this).val());
    });

    $(endId).change(function () {
        //console.log($(this).val());
    });

    $(roomId).change(function () {
        roomNo = $(this).val();
        console.log("new booking room: " + roomNo);
        destroyDataTable();
        setupDataTable(bookingDay, roomNo); 
    });

    $(usageId).change(function () {
        var tmpVal = $(this).val();
        if (tmpVal == usageLen) { // "其他"
            $(otherUsageId).show();
        }
        else 
        {
            $(otherUsageId).hide();
        }
    });

    $('##{rawJS recordFormId}').on('submit', 
        function() {
            if ($(startId).val() > $(endId).val())
            {
               alert("会议室预定时间段非法");
               return false;
            }
            if ($(usageId).val() == usageLen) {
                if (isNullOrEmpty(trim ($(otherUsageId).val()))) {
                    alert("请填写具体的会议室用途");
                    return false;
                }
            } 
            return true;
        }
    );

    function setupDataTable(queryDay, queryRoom) {
        var titleColumns = [];
        titleColumns.push({field: "房间 / 时间", title: "房间 / 时间"})
        for (i = 7; i <= 24; i++) {
            titleColumns.push({
                field: i,
                title: "&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp " + i.toString() + "点"
                // width: "100%"
            });
        }

        $("##{rawJS aNewTable}").bootstrapTable({
            striped: true,
            pagination: true,
            showToggle: true,
            showColumns: true,
            cache: false,           
            pageList: [5,8,10],

            // below is the ajax query and response process.
            url: "@{DayBookingStatusR}",
            method: "GET",
            contentType: "application/json",           

            queryParams: function (params) {
                params["queryDay"]  = queryDay;
                params["queryRoomId"] = queryRoom;
                return params;
            },

            responseHandler: function(retData){
                return retData.dataRows;
            },

            rowStyle: function (row, index) {
                var classes = ['success', 'info', 'active', 'warning', 'danger'];
                if (index % 2 === 0 && index / 2 < classes.length) {
                    return {
                        classes: classes[index / 2],
                    };
                }
                return {};
            },

            columns: titleColumns
        });

        // calculate the cells need merge.
    };

    function destroyDataTable() {
        $("##{rawJS aNewTable}").bootstrapTable("destroy");
        $("##{rawJS aNewTable}").empty(); 
    };

    /// other helpers
    function trim(str){ //删除左右两端的空格
　　     return str.replace(/(^\s*)|(\s*$)/g, "");
　　 }

    function isNullOrEmpty(strVal) {
        if (strVal == '' || strVal == null || strVal == undefined) {
            return true;
        } else {
            return false;
        }
    }
});
